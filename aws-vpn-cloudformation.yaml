
Parameters:
  SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: wordpress
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  vpcCidr:
    Description: VPC CIDR block.
    Type: String
    Default: 10.200.0.0/16
  PublicSubnetCIDR:
    Description: Public subnet CIDR block.
    Type: String
    Default: 10.200.1.0/24
  PrivateSubnetCIDR:
    Description: Private subnet CIDR block.
    Type: String
    Default: 10.200.2.0/24
  IPtoAllow:
    Description: The IP address range that can be used to allow traffic to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  VPNRemoteIP:
    Description: The IP address range that can be used to allow traffic to the EC2 instances
    Type: String
    Default: 0.0.0.0
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-west-2:
      HVM64: ami-067f5c3d5a99edc80
    us-west-1:
      HVM64: ami-05655c267c89566dd
    eu-west-1:
      HVM64: ami-07d9160fa81ccffb5
    eu-central-1:
      HVM64: ami-0c115dbd34c69a004

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref vpcCidr
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true 
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSub'
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSub'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRouteTable'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - InternetGateway
      - PublicRouteTable
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - VPNCltInstance
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable
      InstanceId: !Ref VPNCltInstance
      
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  VPNCltInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn:
      - IntranetSG
    Properties:
      GroupDescription: >-
        Enable All traffic from VPN server IP
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref IPtoAllow
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref IntranetSG
      VpcId: !Ref VPC
      
  IntranetSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Allow all traffic
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
        
  VPNCltInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SourceDestCheck: false
      KeyName: !Ref SSHKeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: 
       - !GetAtt VPNCltInstanceSG.GroupId
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-OpenVPNClt'
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/sh
            yum update -y
            amazon-linux-extras install epel -y
            yum install openvpn -y
            echo 1 > /proc/sys/net/ipv4/ip_forward
            iptables -t nat -A POSTROUTING -o eth0 -s ${PrivateSubnetCIDR} -j MASQUERADE
            echo ${PrivateSubnetCIDR} > /root/data.txt
            #/sbin/iptables-save > /etc/sysconfig/iptables
            curl -L "https://raw.githubusercontent.com/hanroy/aws-vpn-cloudformation/master/vpnfiles/client.ovpn" -o /root/client.ovpn
            sed -i 's/REMOTEIP/${VPNRemoteIP}/g' /root/client.ovpn
            cp /root/client.ovpn /etc/openvpn/client.conf
            systemctl restart openvpn@client
            cat <<EOF > /etc/sysctl.conf
            net.ipv4.ip_forward = 1
            EOF
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
    

  IntranetInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: 
       - !GetAtt IntranetSG.GroupId
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-Intranet'
      UserData:
        !Base64
          Fn::Sub: |
            #!/bin/sh
            echo 1 > /proc/sys/net/ipv4/ip_forward
            yum install httpd php -y
            systemctl enable httpd.service
            groupadd www
            chown -R root /var/www/
            chgrp -R www /var/www/
            chmod -R 775 /var/www/
            chmod g+s /var/www/
            touch /var/www/html/index.php
            cat <<EOF > /var/www/html/index.php
            <?php
            print "Hi there, your IP address is ".$_SERVER['REMOTE_ADDR'];
            ?>
            EOF
            systemctl restart httpd.service
            cat <<EOF > /etc/sysctl.conf
            net.ipv4.ip_forward = 1
            EOF
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch

Outputs:
  VPNCltPrivateIp:
    Description: VPNCltInstance IP
    Value: !GetAtt VPNCltInstance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-VPNCltPrivateIp"

  VPNCltPublicIp:
    Description: VPNCltInstance Public IP
    Value: !GetAtt VPNCltInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-VPNCltPublicIp"
      
      
  IntranetPrivateIp:
    Description: IntranetInstance IP
    Value: !GetAtt IntranetInstance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-IntranetIp"
    

